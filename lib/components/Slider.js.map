{"version":3,"sources":["../../src/components/Slider.js"],"names":["handleStyle","cursor","userSekect","MozUserSelect","KhtmlUserSelect","WebkitUserSelect","OUserSelect","mapToKeyCode","code","codes","Slider","window","addEventListener","dragEnd","removeEventListener","dragStart","index","e","stopPropagation","state","dragging","setState","dragIndex","dragStartX","nativeEvent","offsetX","props","dragChange","dragFromSVG","selection","selected","scale","invert","Math","abs","onChange","mouseMove","keyDown","direction","keyCode","keyboardStep","round","handleLabelFormat","formatLabelFunction","width","height","reset","selectedColor","unselectedColor","sliderStyle","showLabels","selectionWidth","selectionSorted","Array","from","sort","a","b","defaultLabelFormatFunction","f","touchAction","map","m","i","bind","outline","Component","propTypes","data","PropTypes","arrayOf","shape","x0","number","x","y","isRequired","innerWidth","padding","bucketSize","selectionColor","string","histogramPadding","func","object","bool","labelStyle","defaultProps","display","paddingBottom","zIndex","overflow"],"mappings":"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","file":"Slider.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { format as d3Format } from \"d3-format\";\n\nconst handleStyle = {\n  cursor: \"move\",\n  userSekect: \"none\",\n  MozUserSelect: \"none\",\n  KhtmlUserSelect: \"none\",\n  WebkitUserSelect: \"none\",\n  OUserSelect: \"none\",\n};\n\n// Map keycodes to positive or negative values\nexport const mapToKeyCode = (code) => {\n  const codes = {\n    37: -1,\n    38: 1,\n    39: 1,\n    40: -1,\n  };\n  return codes[code] || null;\n};\n\nclass Slider extends Component {\n  componentDidMount() {\n    window.addEventListener(\"mouseup\", this.dragEnd, false);\n    window.addEventListener(\"touchend\", this.dragEnd, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"mouseup\", this.dragEnd, false);\n    window.removeEventListener(\"touchend\", this.dragEnd, false);\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      dragging: false,\n      dragStartX: null,\n    };\n  }\n\n  dragStart = (index, e) => {\n    e.stopPropagation();\n    if (!this.state.dragging) {\n      this.setState(\n        {\n          dragging: true,\n          dragIndex: index,\n          dragStartX: e.nativeEvent.offsetX,\n        },\n        () => {\n          this.props.dragChange(true);\n        }\n      );\n    }\n  };\n\n  dragEnd = (e) => {\n    e.stopPropagation();\n    this.setState(\n      {\n        dragging: false,\n        dragIndex: null,\n        dragStartX: null,\n      },\n      () => {\n        this.props.dragChange(false);\n      }\n    );\n  };\n\n  dragFromSVG = (e) => {\n    if (!this.state.dragging) {\n      let selection = [...this.props.selection];\n      let selected = this.props.scale.invert(e.nativeEvent.offsetX);\n      let dragIndex;\n\n      if (\n        Math.abs(selected - selection[0]) > Math.abs(selected - selection[1])\n      ) {\n        selection[1] = selected;\n        dragIndex = 0;\n      } else {\n        selection[0] = selected;\n        dragIndex = 1;\n      }\n\n      this.props.onChange(selection);\n      this.setState(\n        {\n          dragging: true,\n          dragIndex,\n        },\n        () => {\n          this.props.dragChange(true);\n        }\n      );\n    }\n  };\n\n  mouseMove = (e) => {\n    if (this.state.dragging) {\n      let selection = [...this.props.selection];\n      selection[this.state.dragIndex] = this.props.scale.invert(\n        e.nativeEvent.offsetX\n      );\n      this.props.onChange(selection);\n    }\n  };\n\n  keyDown = (index, e) => {\n    const direction = mapToKeyCode(e.keyCode);\n    const { keyboardStep } = this.props;\n    let selection = [...this.props.selection];\n    selection[index] = Math.round(selection[index] + direction * keyboardStep);\n    this.props.onChange(selection);\n  };\n\n  render() {\n    const {\n      selection,\n      scale,\n      handleLabelFormat,\n      formatLabelFunction,\n      width,\n      height,\n      reset,\n      selectedColor,\n      unselectedColor,\n      sliderStyle,\n      showLabels,\n    } = this.props;\n    const selectionWidth = Math.abs(scale(selection[1]) - scale(selection[0]));\n    const selectionSorted = Array.from(selection).sort((a, b) => +a - +b);\n    const defaultLabelFormatFunction = d3Format(handleLabelFormat);\n    const f = formatLabelFunction || defaultLabelFormatFunction;\n    return (\n      <svg\n        style={{ ...sliderStyle, touchAction: \"none\" }}\n        height={height}\n        width={width}\n        onDoubleClick={reset}\n        onPointerMove={this.mouseMove}\n      >\n        <rect height={4} fill={unselectedColor} x={0} y={10} width={width} />\n        <rect\n          height={4}\n          fill={selectedColor}\n          x={scale(selectionSorted[0])}\n          y={10}\n          width={selectionWidth}\n        />\n        {selection.map((m, i) => {\n          return (\n            <g\n              tabIndex={0}\n              onKeyDown={this.keyDown.bind(this, i)}\n              transform={`translate(${this.props.scale(m)}, 0)`}\n              key={`handle-${i}`}\n              style={{ outline: \"none\" }}\n            >\n              <circle\n                style={handleStyle}\n                r={10}\n                cx={0}\n                cy={12.5}\n                fill=\"#ddd\"\n                strokeWidth=\"1\"\n              />\n              <circle\n                style={handleStyle}\n                onPointerDown={this.dragStart.bind(this, i)}\n                r={9}\n                cx={0}\n                cy={12}\n                fill=\"white\"\n                stroke=\"#ccc\"\n                strokeWidth=\"1\"\n              />\n              {showLabels ? (\n                <text\n                  style={handleStyle}\n                  textAnchor=\"middle\"\n                  x={0}\n                  y={36}\n                  fill=\"#666\"\n                  fontSize={12}\n                >\n                  {f(m)}\n                </text>\n              ) : null}\n            </g>\n          );\n        })}\n      </svg>\n    );\n  }\n}\n\nSlider.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      x0: PropTypes.number,\n      x: PropTypes.number,\n      y: PropTypes.number,\n    })\n  ).isRequired,\n  selection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  innerWidth: PropTypes.number,\n  padding: PropTypes.number,\n  bucketSize: PropTypes.number,\n  selectionColor: PropTypes.string,\n  histogramPadding: PropTypes.number,\n  scale: PropTypes.func,\n  reset: PropTypes.func,\n  keyboardStep: PropTypes.number,\n  dragChange: PropTypes.func,\n  onChange: PropTypes.func,\n  handleLabelFormat: PropTypes.string,\n  formatLabelFunction: PropTypes.func,\n  sliderStyle: PropTypes.object,\n  showLabels: PropTypes.bool,\n  labelStyle: PropTypes.object,\n  selectedColor: PropTypes.string,\n  unselectedColor: PropTypes.string,\n};\n\nSlider.defaultProps = {\n  sliderStyle: {\n    display: \"block\",\n    paddingBottom: \"8px\",\n    zIndex: 6,\n    overflow: \"visible\",\n  },\n  keyboardStep: 1,\n  showLabels: true,\n};\n\nexport default Slider;\n"]}