{"version":3,"sources":["../../src/components/Histogram.js"],"names":["Histogram","bucket","props","onChange","x0","x","height","data","histogramStyle","showOnDrag","selection","reset","selectedColor","unselectedColor","scale","barBorderRadius","barStyle","padding","barPadding","width","max","dragging","selectionSorted","Array","from","sort","a","b","showHistogramPredicate","h","o","opacity","s","Object","assign","zIndex","overflow","position","bottom","display","backgroundColor","map","i","y","selectBucket","bind","cursor","Component","propTypes","PropTypes","arrayOf","shape","number","isRequired","bucketSize","innerWidth","bool","func","object","string","defaultProps","histogramPadding"],"mappings":"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","file":"Histogram.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Motion, spring } from \"@serprex/react-motion\";\n\nclass Histogram extends Component {\n  selectBucket(bucket) {\n    this.props.onChange([bucket.x0, bucket.x]);\n  }\n\n  render() {\n    const {\n      height,\n      data,\n      histogramStyle,\n      showOnDrag,\n      selection,\n      reset,\n      selectedColor,\n      unselectedColor,\n      scale,\n      barBorderRadius,\n      barStyle,\n      padding,\n      barPadding,\n      width,\n      max,\n      dragging,\n    } = this.props;\n\n    const selectionSorted = Array.from(selection).sort((a, b) => +a - +b);\n    const showHistogramPredicate = showOnDrag\n      ? dragging\n        ? true\n        : false\n      : true;\n    const h = showHistogramPredicate ? height : 0;\n    const o = showHistogramPredicate ? 1 : 0;\n\n    return (\n      <Motion style={{ height: spring(h), opacity: spring(o) }}>\n        {(s) => {\n          return (\n            <div\n              style={Object.assign({}, s, {\n                zIndex: 0,\n                overflow: \"hidden\",\n                position: showOnDrag && \"absolute\",\n                bottom: showOnDrag && `calc(100% - ${padding}px)`,\n              })}\n            >\n              <svg\n                style={Object.assign(\n                  {\n                    display: \"block\",\n                    backgroundColor: \"white\",\n                  },\n                  histogramStyle\n                )}\n                width={width}\n                height={height}\n              >\n                <g transform={`translate(0, ${height})`}>\n                  <g transform=\"scale(1,-1)\">\n                    {data.map((bucket, i) => {\n                      let opacity = 0;\n\n                      if (\n                        selectionSorted[0] > bucket.x ||\n                        selectionSorted[1] < bucket.x0\n                      ) {\n                        opacity = 0;\n                      } else if (\n                        selectionSorted[0] <= bucket.x0 &&\n                        selectionSorted[1] >= bucket.x\n                      ) {\n                        // Entire block is covered\n                        opacity = 1;\n                      } else if (\n                        selectionSorted[0] > bucket.x0 &&\n                        selectionSorted[1] > bucket.x\n                      ) {\n                        opacity =\n                          1 -\n                          (selectionSorted[0] - bucket.x0) /\n                            (bucket.x - bucket.x0);\n                        // Some of left block is covered\n                      } else if (\n                        selectionSorted[1] < bucket.x &&\n                        selectionSorted[0] < bucket.x0\n                      ) {\n                        // Some of right block is covered\n                        opacity =\n                          (selectionSorted[1] - bucket.x0) /\n                          (bucket.x - bucket.x0);\n                      } else {\n                        // Parital match\n                        opacity =\n                          (selectionSorted[1] - selectionSorted[0]) /\n                          (bucket.x - bucket.x0);\n                      }\n                      return (\n                        <g\n                          key={i}\n                          transform={`translate(${\n                            scale(bucket.x0) + barPadding / 2\n                          } 0)`}\n                        >\n                          <rect\n                            fill={unselectedColor}\n                            width={\n                              scale(bucket.x) - scale(bucket.x0) - barPadding\n                            }\n                            height={(bucket.y / max) * height}\n                            rx={barBorderRadius}\n                            ry={barBorderRadius}\n                            x={0}\n                          />\n                          <rect\n                            fill={selectedColor}\n                            onClick={this.selectBucket.bind(this, bucket)}\n                            onDoubleClick={reset.bind(this)}\n                            style={Object.assign(\n                              { opacity, cursor: \"pointer\" },\n                              barStyle\n                            )}\n                            width={\n                              scale(bucket.x) - scale(bucket.x0) - barPadding\n                            }\n                            height={(bucket.y / max) * height}\n                            rx={barBorderRadius}\n                            ry={barBorderRadius}\n                            x={0}\n                          />\n                        </g>\n                      );\n                    })}\n                  </g>\n                </g>\n              </svg>\n            </div>\n          );\n        }}\n      </Motion>\n    );\n  }\n}\n\nHistogram.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      x0: PropTypes.number,\n      x: PropTypes.number,\n      y: PropTypes.number,\n    })\n  ).isRequired,\n  selection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  barBorderRadius: PropTypes.number,\n  bucketSize: PropTypes.number,\n  width: PropTypes.number,\n  innerWidth: PropTypes.number,\n  height: PropTypes.number,\n  showOnDrag: PropTypes.bool,\n  reset: PropTypes.func,\n  onChange: PropTypes.func,\n  histogramStyle: PropTypes.object,\n  selectedColor: PropTypes.string,\n  unselectedColor: PropTypes.string,\n  scale: PropTypes.func,\n  barStyle: PropTypes.object,\n  padding: PropTypes.number,\n  barPadding: PropTypes.number,\n  max: PropTypes.number,\n  dragging: PropTypes.bool,\n};\n\nHistogram.defaultProps = {\n  histogramPadding: 1,\n};\n\nexport default Histogram;\n"]}