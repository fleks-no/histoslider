{"version":3,"sources":["../../src/components/Histogram.js"],"names":["Histogram","bucket","props","onChange","x0","x","height","data","histogramStyle","showOnDrag","selection","reset","selectedColor","unselectedColor","scale","barBorderRadius","barStyle","padding","barPadding","width","max","dragging","selectionSorted","Array","from","sort","a","b","showHistogramPredicate","h","o","opacity","s","Object","assign","zIndex","overflow","position","bottom","display","backgroundColor","map","i","Math","y","selectBucket","bind","cursor","Component","propTypes","PropTypes","arrayOf","shape","number","isRequired","bucketSize","innerWidth","bool","func","object","string","defaultProps","histogramPadding"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Motion, spring } from \"@serprex/react-motion\";\n\nclass Histogram extends Component {\n  selectBucket(bucket) {\n    this.props.onChange([bucket.x0, bucket.x]);\n  }\n\n  render() {\n    const {\n      height,\n      data,\n      histogramStyle,\n      showOnDrag,\n      selection,\n      reset,\n      selectedColor,\n      unselectedColor,\n      scale,\n      barBorderRadius,\n      barStyle,\n      padding,\n      barPadding,\n      width,\n      max,\n      dragging,\n    } = this.props;\n\n    const selectionSorted = Array.from(selection).sort((a, b) => +a - +b);\n    const showHistogramPredicate = showOnDrag\n      ? dragging\n        ? true\n        : false\n      : true;\n    const h = showHistogramPredicate ? height : 0;\n    const o = showHistogramPredicate ? 1 : 0;\n\n    return (\n      <Motion style={{ height: spring(h), opacity: spring(o) }}>\n        {(s) => {\n          return (\n            <div\n              style={Object.assign({}, s, {\n                zIndex: 0,\n                overflow: \"hidden\",\n                position: showOnDrag && \"absolute\",\n                bottom: showOnDrag && `calc(100% - ${padding}px)`,\n              })}\n            >\n              <svg\n                style={Object.assign(\n                  {\n                    display: \"block\",\n                    backgroundColor: \"white\",\n                  },\n                  histogramStyle\n                )}\n                width={width}\n                height={height}\n              >\n                <g transform={`translate(0, ${height})`}>\n                  <g transform=\"scale(1,-1)\">\n                    {data.map((bucket, i) => {\n                      let opacity = 0;\n\n                      if (\n                        selectionSorted[0] > bucket.x ||\n                        selectionSorted[1] < bucket.x0\n                      ) {\n                        opacity = 0;\n                      } else if (\n                        selectionSorted[0] <= bucket.x0 &&\n                        selectionSorted[1] >= bucket.x\n                      ) {\n                        // Entire block is covered\n                        opacity = 1;\n                      } else if (\n                        selectionSorted[0] > bucket.x0 &&\n                        selectionSorted[1] > bucket.x\n                      ) {\n                        opacity =\n                          1 -\n                          (selectionSorted[0] - bucket.x0) /\n                            (bucket.x - bucket.x0);\n                        // Some of left block is covered\n                      } else if (\n                        selectionSorted[1] < bucket.x &&\n                        selectionSorted[0] < bucket.x0\n                      ) {\n                        // Some of right block is covered\n                        opacity =\n                          (selectionSorted[1] - bucket.x0) /\n                          (bucket.x - bucket.x0);\n                      } else {\n                        // Parital match\n                        opacity =\n                          (selectionSorted[1] - selectionSorted[0]) /\n                          (bucket.x - bucket.x0);\n                      }\n                      return (\n                        <g\n                          key={i}\n                          transform={`translate(${\n                            scale(bucket.x0) + barPadding / 2\n                          } 0)`}\n                        >\n                          <rect\n                            fill={unselectedColor}\n                            width={Math.max(\n                              1,\n                              scale(bucket.x) - scale(bucket.x0) - barPadding\n                            )}\n                            height={(bucket.y / max) * height}\n                            rx={barBorderRadius}\n                            ry={barBorderRadius}\n                            x={0}\n                          />\n                          <rect\n                            fill={selectedColor}\n                            onClick={this.selectBucket.bind(this, bucket)}\n                            onDoubleClick={reset.bind(this)}\n                            style={Object.assign(\n                              { opacity, cursor: \"pointer\" },\n                              barStyle\n                            )}\n                            width={Math.max(\n                              1,\n                              scale(bucket.x) - scale(bucket.x0) - barPadding\n                            )}\n                            height={(bucket.y / max) * height}\n                            rx={barBorderRadius}\n                            ry={barBorderRadius}\n                            x={0}\n                          />\n                        </g>\n                      );\n                    })}\n                  </g>\n                </g>\n              </svg>\n            </div>\n          );\n        }}\n      </Motion>\n    );\n  }\n}\n\nHistogram.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      x0: PropTypes.number,\n      x: PropTypes.number,\n      y: PropTypes.number,\n    })\n  ).isRequired,\n  selection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  barBorderRadius: PropTypes.number,\n  bucketSize: PropTypes.number,\n  width: PropTypes.number,\n  innerWidth: PropTypes.number,\n  height: PropTypes.number,\n  showOnDrag: PropTypes.bool,\n  reset: PropTypes.func,\n  onChange: PropTypes.func,\n  histogramStyle: PropTypes.object,\n  selectedColor: PropTypes.string,\n  unselectedColor: PropTypes.string,\n  scale: PropTypes.func,\n  barStyle: PropTypes.object,\n  padding: PropTypes.number,\n  barPadding: PropTypes.number,\n  max: PropTypes.number,\n  dragging: PropTypes.bool,\n};\n\nHistogram.defaultProps = {\n  histogramPadding: 1,\n};\n\nexport default Histogram;\n"],"file":"Histogram.js"}