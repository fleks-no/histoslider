{"version":3,"sources":["../../src/stories/index.js"],"names":["stressTestData","n","offset","multiplier","Array","from","map","d","i","x0","x","y","buckets","dateTimeData","Date","valueOf","HistosliderContainer","selection","setState","state","setSelection","props","Component","module","add","value","date","dtf","Intl","DateTimeFormat","year","month","day","formatToParts","mo","da","ye"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD;AAAA,MAAIC,MAAJ,uEAAa,CAAb;AAAA,MAAgBC,UAAhB,uEAA6B,CAA7B;AAAA,SACrBC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACH,CAAD,CAAhB,EAAqBK,GAArB,CAAyB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAW;AAClCC,MAAAA,EAAE,EAAE,CAACD,CAAC,GAAGN,MAAL,IAAeC,UADe;AAElCO,MAAAA,CAAC,EAAE,CAACF,CAAC,GAAG,CAAJ,GAAQN,MAAT,IAAmBC,UAFY;AAGlCQ,MAAAA,CAAC,EAAE,CAACH,CAAC,GAAG,CAAJ,GAAQ,CAAT,IAAc;AAHiB,KAAX;AAAA,GAAzB,CADqB;AAAA,CAAvB;;AAOA,IAAMI,OAAO,GAAG,CACd;AACEH,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,CAAC,EAAE,CAFL;AAGEC,EAAAA,CAAC,EAAE;AAHL,CADc,EAMd;AACEF,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,CAAC,EAAE,CAFL;AAGEC,EAAAA,CAAC,EAAE;AAHL,CANc,EAWd;AACEF,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,CAAC,EAAE,CAFL;AAGEC,EAAAA,CAAC,EAAE;AAHL,CAXc,EAgBd;AACEF,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,CAAC,EAAE,CAFL;AAGEC,EAAAA,CAAC,EAAE;AAHL,CAhBc,CAAhB;AAuBA,IAAME,YAAY,GAAG,CACnB;AACEJ,EAAAA,EAAE,EAAE,IAAIK,IAAJ,CAAS,YAAT,EAAuBC,OAAvB,EADN;AAEEL,EAAAA,CAAC,EAAE,IAAII,IAAJ,CAAS,YAAT,EAAuBC,OAAvB,EAFL;AAGEJ,EAAAA,CAAC,EAAE;AAHL,CADmB,EAMnB;AACEF,EAAAA,EAAE,EAAE,IAAIK,IAAJ,CAAS,YAAT,EAAuBC,OAAvB,EADN;AAEEL,EAAAA,CAAC,EAAE,IAAII,IAAJ,CAAS,YAAT,EAAuBC,OAAvB,EAFL;AAGEJ,EAAAA,CAAC,EAAE;AAHL,CANmB,EAWnB;AACEF,EAAAA,EAAE,EAAE,IAAIK,IAAJ,CAAS,YAAT,EAAuBC,OAAvB,EADN;AAEEL,EAAAA,CAAC,EAAE,IAAII,IAAJ,CAAS,YAAT,EAAuBC,OAAvB,EAFL;AAGEJ,EAAAA,CAAC,EAAE;AAHL,CAXmB,EAgBnB;AACEF,EAAAA,EAAE,EAAE,IAAIK,IAAJ,CAAS,YAAT,EAAuBC,OAAvB,EADN;AAEEL,EAAAA,CAAC,EAAE,IAAII,IAAJ,CAAS,YAAT,EAAuBC,OAAvB,EAFL;AAGEJ,EAAAA,CAAC,EAAE;AAHL,CAhBmB,CAArB,C,CAuBA;;IACMK,oB;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,SAAS,EAAE;AADL,K;;mEAGO,UAAAA,SAAS,EAAI;AAC1B,gCAAO,cAAP;;AACA,YAAKC,QAAL,CAAc;AAAED,QAAAA,SAAS,EAATA;AAAF,OAAd;AACD,K;;6DACQ;AAAA,0BACP,gCAAC,aAAD,CACE;AADF;AAEE,QAAA,IAAI,EAAEL,OAFR,CAGE;AAHF;AAIE,QAAA,SAAS,EAAE,MAAKO,KAAL,CAAWF,SAJxB;AAKE,QAAA,QAAQ,EAAE,MAAKG;AALjB,SAMM,MAAKC,KANX,EADO;AAAA,K;;;;;;EARwBC,gB;;AAkBnC,uBAAU,WAAV,EAAuBC,MAAvB;AACA,uBAAU,QAAV,EAAoBA,MAApB;AACA,uBAAU,aAAV,EAAyBA,MAAzB,EACGC,GADH,CACO,MADP,EACe;AAAA,sBAAM,gCAAC,oBAAD,OAAN;AAAA,CADf,EAEGA,GAFH,CAEO,cAFP,EAEuB;AAAA,sBAAM,gCAAC,oBAAD;AAAsB,IAAA,UAAU;AAAhC,IAAN;AAAA,CAFvB,EAGGA,GAHH,CAGO,mBAHP,EAG4B;AAAA,sBAAM,gCAAC,oBAAD;AAAsB,IAAA,gBAAgB;AAAtC,IAAN;AAAA,CAH5B,EAIGA,GAJH,CAIO,WAJP,EAIoB;AAAA,sBAChB,gCAAC,oBAAD;AAAsB,IAAA,IAAI,EAAExB,cAAc,CAAC,EAAD,CAA1C;AAAgD,IAAA,KAAK,EAAE;AAAvD,IADgB;AAAA,CAJpB,EAOGwB,GAPH,CAOO,gBAPP,EAOyB;AAAA,sBACrB,gCAAC,oBAAD;AAAsB,IAAA,IAAI,EAAExB,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,EAAZ,CAA1C;AAA2D,IAAA,KAAK,EAAE;AAAlE,IADqB;AAAA,CAPzB,EAUGwB,GAVH,CAUO,yBAVP,EAUkC;AAAA,sBAC9B,gCAAC,oBAAD;AACE,IAAA,YAAY,EAAE,GADhB;AAEE,IAAA,IAAI,EAAExB,cAAc,CAAC,EAAD,EAAK,CAAL,EAAQ,EAAR,CAFtB;AAGE,IAAA,KAAK,EAAE;AAHT,IAD8B;AAAA,CAVlC,EAiBGwB,GAjBH,CAiBO,WAjBP,EAiBoB;AAAA,sBAChB,gCAAC,oBAAD;AACE,IAAA,UAAU,EAAE;AADd,IADgB;AAAA,CAjBpB,EAoBIA,GApBJ,CAoBQ,gBApBR,EAoB0B;AAAA,sBACtB,gCAAC,oBAAD;AACI,IAAA,IAAI,EAAEX,YADV;AAEI,IAAA,mBAAmB,EAAE,6BAACY,KAAD,EAAW;AAC9B,UAAMC,IAAI,GAAG,IAAIZ,IAAJ,CAASW,KAAT,CAAb;AACA,UAAME,GAAG,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAACC,QAAAA,IAAI,EAAE,SAAP;AAAkBC,QAAAA,KAAK,EAAE,OAAzB;AAAkCC,QAAAA,GAAG,EAAE;AAAvC,OAA9B,CAAZ;;AAF8B,+BAGsBL,GAAG,CAACM,aAAJ,CAAkBP,IAAlB,CAHtB;AAAA;AAAA,UAGfQ,EAHe,0BAGtBT,KAHsB;AAAA,UAGAU,EAHA,0BAGPV,KAHO;AAAA,UAGeW,EAHf,0BAGQX,KAHR;;AAI9B,uBAAUU,EAAV,cAAgBD,EAAhB,cAAsBE,EAAtB;AACD;AAPL,IADsB;AAAA,CApB1B","sourcesContent":["import React, { Component } from \"react\";\nimport { storiesOf, linkTo } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Histogram, Histoslider, Slider } from \"..\";\n\nconst stressTestData = (n, offset = 0, multiplier = 1) =>\n  Array.from(Array(n)).map((d, i) => ({\n    x0: (i + offset) * multiplier,\n    x: (i + 1 + offset) * multiplier,\n    y: (i % 5 + 1) * 10\n  }));\n\nconst buckets = [\n  {\n    x0: 0,\n    x: 1,\n    y: 8\n  },\n  {\n    x0: 1,\n    x: 2,\n    y: 2\n  },\n  {\n    x0: 2,\n    x: 3,\n    y: 0\n  },\n  {\n    x0: 3,\n    x: 4,\n    y: 2\n  }\n];\n\nconst dateTimeData = [\n  {\n    x0: new Date('2020-01-01').valueOf(),\n    x: new Date('2020-01-30').valueOf(),\n    y: 8\n  },\n  {\n    x0: new Date('2020-02-01').valueOf(),\n    x: new Date('2020-02-28').valueOf(),\n    y: 2\n  },\n  {\n    x0: new Date('2020-03-01').valueOf(),\n    x: new Date('2020-03-30').valueOf(),\n    y: 0\n  },\n  {\n    x0: new Date('2020-04-01').valueOf(),\n    x: new Date('2020-04-30').valueOf(),\n    y: 2\n  }\n];\n\n// Stateful container for testing interaction\nclass HistosliderContainer extends Component {\n  state = {\n    selection: null\n  };\n  setSelection = selection => {\n    action(\"setSelection\");\n    this.setState({ selection });\n  };\n  render = () =>\n    <Histoslider\n      // An array of data to show on the slider\n      data={buckets}\n      // A function to handle a change in the selection\n      selection={this.state.selection}\n      onChange={this.setSelection}\n      {...this.props}\n    />;\n}\nstoriesOf(\"Histogram\", module);\nstoriesOf(\"Slider\", module);\nstoriesOf(\"Histoslider\", module)\n  .add(\"Open\", () => <HistosliderContainer />)\n  .add(\"Show on drag\", () => <HistosliderContainer showOnDrag />)\n  .add(\"Disable histogram\", () => <HistosliderContainer disableHistogram />)\n  .add(\"More data\", () =>\n    <HistosliderContainer data={stressTestData(50)} width={800} />\n  )\n  .add(\"Non zero start\", () =>\n    <HistosliderContainer data={stressTestData(200, 2000, 10)} width={800} />\n  )\n  .add(\"Stepping in lots of 100\", () =>\n    <HistosliderContainer\n      keyboardStep={100}\n      data={stressTestData(20, 1, 10)}\n      width={800}\n    />\n  )\n  .add(\"No labels\", () =>\n    <HistosliderContainer\n      showLabels={false}/>\n  ).add(\"Date time data\", () =>\n    <HistosliderContainer\n        data={dateTimeData}\n        formatLabelFunction={(value) => {\n          const date = new Date(value);\n          const dtf = new Intl.DateTimeFormat('en', {year: 'numeric', month: 'short', day: '2-digit'});\n          const [{value: mo}, , {value: da}, , {value: ye}] = dtf.formatToParts(date);\n          return `${da}-${mo}-${ye}`;\n        }}\n    />\n  )\n"],"file":"index.js"}